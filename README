This is a theme editor for GNUstep.  It is at an early stage of development ...

Theming has to be built into the GNUstep GUI in order for a theme editor
to be useful ... this will be an incremental process, with capabilities
being added to the editor as they are added to the gui library.

The editor is already capable of building simple themes!

Look for more information on using the application in the online help.

To work on Thematic, you also need Gorm.app and ProjectCenter.app,
and a copy of an rtfd editor such as Ink.app if you wish to improve the
online help (Resources/Thematic.rtfd).

Building/using the current editor requires the *latest* version of
the GUI from SVN.  The major task in theming is now changing all the
control drawing code to be themable ... identifying a minimal set of
drawing methods for each control and defining the number of tile
images needed for each, and updating the code in the GUI library.

To help with developing Thematic itsself, we need to add code to deal
with assigning tiles for particular controls and overriding theme drawing
methods for particular controls.

For most controls, this means:
1. Editing ThemeDocument.gorm to add the control to the main document window.
2. Modify ControlElement.m or implement a subclass of ControlElement to
handle any special featurs needed for your control.
If you create a subclass, this will probably also involve creating
a new Gorm file for the inspector for the new control ...
see ControlElement.gorm for an example.
3. Edit ThemeDocument.m to integrate the changes.
4. Define any tile images to be used to draw the control by editing 
Resources/CodeInfo.plist
5. Define any special colors to be used to draw the control by editing 
Resources/CodeInfo.plist
5. Define any NASInterfaceStyle values or defaults settings which control
behavior fo the control by editing Resources/CodeInfo.plist
6. Define methods that can be overridden to draw the control differently ...
6a. Add the methods and a description of each to Resources/CodeInfo.plist
6b. Add template implementations for each method as a file whose name is
Resources/xxx.txt where xxx is the method name with any colons replaced by
underscores.

