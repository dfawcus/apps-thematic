{\rtf1\ansi\ansicpg10000\cocoartf102{\fonttbl\f0\fswiss Helvetica;}
{\colortbl;\red0\green0\blue0;\red0\green0\blue0;}
\f0\fs24\pard\tx0\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\ql \uc0 This is a theme editor for GNUstep.  It is at an early stage of development ...\cf1 \uc0 \par
\par
The design of the editor is that any theme changes should take effect immediately and be applied to the running application so that you can effectively preview them.\par
\cf0 \uc0 \par
Theming has to be built into the GNUstep GUI in order for a theme editor to be useful, and this will be an incremental process, with capabilities being added to the editor as they are added to the GUI library. \par
                \par
Building\cf2 \uc0 /using\cf0 \uc0  the theme editor \cf2 \uc0 generally \cf0 \uc0 requires the *latest* version of the GUI from SVN.\par
\par
\fs26\b \uc0 Current capabilities are ...\b0 \uc0 \par
\fs24 \uc0 \par
1. Control of system colors\par
Click on the color wheel icon in the main theme window to raise an inspector which permits you to redefine all the system colors used in drawing controls in the GUI.\par
\par
2. Control of system images\par
\cf2 \uc0 Click on the images icon in the main theme window to raise an inspector which permits you to redefine all the system images used in drawing controls in the GUI.\par
\par
3. Control of menus\par
Click on the menus icon to raise an inspector allowing you to change menu style.\par
In future this should allow detailed control over how menus are drawn.\par
\par
4. Control of windows and panels\par
Click on the windows icon to raise an inspector allowing you to change whether window decorations are handled by the GUI (themed) or drawn natively by the backend.\par
In future this should allow detailed control over how window decorations are drawn.\par
\par
5. General/miscellaneous settings\par
Click on the GNUstep logo to set attributes for the theme being edited/created ...\par
The authorship, the icon to identify the theme etc.\par
\par
\fs26\b \uc0 In future the aim is to have:\par
\par
\cf0\fs24\b0\cf1 \uc0 (partially implemented and under development) \par
\cf0\cf2 \uc0 \par
6. Drawing controls by tiling images\par
Clicking on a control in the main theme window should raise a tabbed inspector where the \rquote Tiles\rquote  tab allows you to define the image to be tiled to draw that control and the portions of the image to use for different purposes when tiling.  The image for a control is split into nine sections producing four corner sections drawn directly, and the intermediary sections which are repeatedly tiled to fill the actual size of the control.\par
\par
7. Specifying colors for a control and its subsidiary controls\par
\cf0\cf1 \uc0 Clicking on a control in the main theme window should raise a tabbed inspector where the \rquote Colors\rquote  tab allows you to define the colors used to draw the control.\par
\cf0\cf2 \uc0 \par
8. Implementing new methods to draw controls\par
\cf0\cf1 \uc0 Clicking on a control in the main theme window should raise a tabbed inspector where the \rquote Code\rquote   tab allows you to select the drawing methods used to draw that control and edit code to subclass those methods (or delete the subclassed version of a method).\par
\cf0\cf2 \uc0 \par
It should be possible to combine all these mechanisms freely ... for instance by overriding the drawing method, calling the superclass implementation (which draws a background in a specified colour and tiles images to form a border) then draw extra decoration on top of that.\par
\par
}