/* This property list must be a dictionary defining the API for drawing
 * GUI controls.
 * At the top level it is keyed on control name ... which is the name of
 * the class of the control (or other GUI element).
 * Each control is defined by a dictionary containing various items.
 * An extra dictionary named 'Generic' contains extra theme information
 * not specific to particular controls.  The code in CodeEditor.m must
 * deal with them specially.
 *
 * The keys are:
 *
 * ColorElements ... a dictionary listing the names of GUI elements
 *  drawn as part of this control which are able to have a color set.
 *  Each element listed is defined by a dictionary which may contain
 *  an array keyed on 'States' listing the states for which colors
 *  may be specified (Normal,Highlighted,Selected).  If this dictionary
 *  is missing, the 'Normal' state is assumed.
 *
 * Defaults ... a dictionary containing information about user defaults
 *   settings which can be used for the control.  Each item in the dictionary
 *   identifies a particular setting.
 *
 * Fragments ... a dictionary mapping method names or generic names of
 *   fragments of source, header or make files to help text describing
 *   their use.  For each of these listed fragments, a template file
 *   must exist so that users have a starting poiint for editing the
 *   fragment. 
 *
 * TileElements ... a dictionary listing the names of GUI elements
 *  drawn as part of this control and capable of being tiled.
 *  Each element listed is defined by a dictionary which may contain
 *  an array keyed on 'States' listing the states for which a tile image
 *  may be specified (Normal,Highlighted,Selected).  If this dictionary
 *  is missing, the 'Normal' state is assumed.
 *
 */
{
  Generic = {
    Fragments = {
      CommonMethods =
"This code fragment is provided to allow you to override methods wich are common to all of your theme rather than specific to a particular control (eg initialisation and deallocation.";
      IncludeHeaders =
"This code fragment is provided to allow you to specify additional header files to be included at the stat of your theme code.";
      MakeAdditions =
"This allows you to provide a makefile fragment to tell gnustep-make to link your theme with extra libraries or compile it with extra flags.";
      VariableDeclarations =
"This code fragment allows you to declare extra instance variables for use by all your theme code.";
    };
  };
  NSButton = {
    ColorElements = {
      NSButton = {
	States = (Normal, Highlighted, Selected);
      };
    };
    Fragments = {
      "drawButton:in:view:style:state:" =
"Draws a button frame and background (not its content) for the specified cell and view.";
    };
    TileElements = {
      NSButton = {
	States = (Normal, Highlighted, Selected);
      };
    };
  };
  NSScroller = {
    ColorElements = {
      GSScrollerLeftArrow = {};
      GSScrollerRightArrow = {};
      GSScrollerUpArrow = {};
      GSScrollerDownArrow = {};
      GSScrollerHorizontalKnob = {};
      GSScrollerVerticalKnob = {};
      GSScrollerHorizontalSlot = {};
      GSScrollerVerticalSlot = {};
    };
    Defaults = {
      "Arrows behavior" = {
        Name = NSScrollerInterfaceStyle;
        Description = "This controls the positioning of the arrow buttons within the scroller and also the behavior when you click on the scroller outside the arrows.";
	DefaultOption = NSNextStepInterfaceStyle;
	Options = {
	  "Arrows at opposite ends of scroller"
	    = NSWindows95InterfaceStyle;
	  "Arrows at the same end of the scroller"
	   = NSNextStepInterfaceStyle;
	};
      };
    };
    Fragments = {
      "cellForScrollerArrow:horizontal:" =
"Returns the button cell used to draw a scroller arrow.";
      "cellForScrollerKnob:" =
"Returns the button cell used to draw a scroller knob.";
      "cellForScrollerKnobSlot:" =
"Returns the button cell used to draw a scroller knob slot.";
      "defaultScrollerWidth" =
"Returns the scroller width to be used.";
    };
    TileElements = {
      GSScrollerLeftArrow = {};
      GSScrollerRightArrow = {};
      GSScrollerUpArrow = {};
      GSScrollerDownArrow = {};
      GSScrollerHorizontalKnob = {};
      GSScrollerVerticalKnob = {};
      GSScrollerHorizontalSlot = {};
      GSScrollerVerticalSlot = {};
    };
  };
  NSScrollView = {
    ColorElements = {
      NSScrollView = {};
    };
    Defaults = {
      "Scroller position" = {
        Name = NSScrollViewInterfaceStyle;
        Description = "This controls the positioning of the vertical scroller within the scroll view.";
	DefaultOption = NSNextStepInterfaceStyle;
	Options = {
	  "Scroller on right of view"
	    = NSWindows95InterfaceStyle;
	  "Scroller on left of view"
	   = NSNextStepInterfaceStyle;
	};
      };
    };
  };
}
